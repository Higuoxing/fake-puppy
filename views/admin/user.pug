extends ../layouts/_layout.pug

block variables
  - var activePage = 'basic-table'
  - var activeGroup = 'tables'

block title
  title Users

block content
  .app-title
    div
      h1
        i.fa.fa-th-list
        |  Users

    ul.app-breadcrumb.breadcrumb
      li.breadcrumb-item
        i.fa.fa-home.fa-lg
      li.breadcrumb-item
        | Tables
      li.breadcrumb-item.active
        a(href = '#') Users
        
  - if (live_display === true) {
      .row
        .col-md-6
          .tile
            h4 &nbsp&nbsp Outgoing Data Flow
            div(id = 'graph-outgoing', style = 'width: inherit')
              
        .col-md-6
          .tile
            h4 &nbsp&nbsp Incoming Data Flow
            div(id = 'graph-incoming', style = 'width: inherit')
  - }
  
    .col-md-12
      .tile
        .table-responsive
          table.table
            thead
              tr
                th # 
                th State
                th IP Address
                th Mac Address
                th Gateway ID
                th Token
                th Incoming
                th Outgoing
                th Operation
                th -
                
            tbody
              - if (users.length > 0) {
              -   users.forEach((user, index) => {
                    tr
                      td #{index}
                      - if (user.state === 'pending') {
                          td
                            span.badge.badge-danger Offline
                      - } else if (user.state === 'activate') {
                          td
                            span.badge.badge-success Online
                      - }
                      td #{user.ip_addr}
                      td #{user.mac_addr}
                      td #{user.gw_id}
                      td #{user.token}
                      td(id=`${user.token}_incoming`) #{user.incoming[user.incoming.length-1]}
                      td(id=`${user.token}_outgoing`) #{user.outgoing[user.outgoing.length-1]}
                      td
                        a.btn.badge.badge-danger(href = `/admin/auth/kickout?token=${user.token}`) Kick out
                      td
                        a.btn.badge.badge-danger(href = `/admin/auth/remove?token=${user.token}`) Remove  
              -   });
              - } else {
                    p Oops, no user yet!
              - }

block specific-js
  script(src = 'https://cdn.plot.ly/plotly-latest.min.js')
  - let socket_addr = socket_conf.addr;
  script.
    // socket.io
    const socket = io.connect('#{socket_addr}');
    socket.on('loading', function (data) {
      // hand shake
      socket.emit('user-connection', { data: 'pong' });
    });
    
  - if (live_display === true) {
      //- dynamic plot
      script.
        // plot.ly
        var time = new Date();
        let len = parseInt(#{users.length});
        let data_outgoing = [];
        
      
        for (let i = 0; i < len; i ++) {
          // init data
          data_outgoing.push({ x: [time], y: [ 0 ], mode: 'lines', name: `# ${i}` });
        }
        
        Plotly.plot('graph-outgoing', data_outgoing);

        socket.on('user-data-outgoing', (data) => {
          // update user-data-outgoing
          var time = new Date();
          let y_update = [];
          let time_update = [];
          let curve_counter = [];
          data.active_user.forEach((user, index) => {
            let tb_outgoing = document.getElementById(user.token + '_outgoing');
            tb_outgoing.innerHTML = user.outgoing[user.outgoing.length-1];
            curve_counter.push(index);
            time_update.push([time]);
            y_update.push([user.outgoing[user.outgoing.length-1]]);
          });
        
          var update = {
            x:  time_update,
            y:  y_update
          }
        
          var olderTime = time.setMinutes(time.getMinutes() - 1);
          var futureTime = time.setMinutes(time.getMinutes() + 1);
        
          var minuteView = {
            xaxis: {
              type: 'date',
              range: [olderTime,futureTime]
            }
          };
          Plotly.relayout('graph-outgoing', minuteView);
        
          // extend traces
          Plotly.extendTraces('graph-outgoing', update, curve_counter);
        });

  - } else {
      //- static plot
  - }
  
  - if (live_display === true) {
      //- dynamic plot
      script.
        // plot.ly
        let data_incoming = [];
  
  
        for (let i = 0; i < len; i ++) {
          // init data
          data_incoming.push({ x: [time], y: [ 0 ], mode: 'lines', name: `# ${i}` });
        }
  
        Plotly.plot('graph-incoming', data_incoming);
  
        socket.on('user-data-incoming', (data) => {
          // update user-data-outgoing
          var time = new Date();
          let y_update = [];
          let time_update = [];
          let curve_counter = [];
          data.active_user.forEach((user, index) => {
            let tb_incoming = document.getElementById(user.token + '_incoming');
            tb_incoming.innerHTML = user.incoming[user.incoming.length-1];
            curve_counter.push(index);
            time_update.push([time]);
            y_update.push([user.incoming[user.incoming.length-1]]);
          });
  
          var update = {
            x:  time_update,
            y:  y_update
          }
  
          var olderTime = time.setMinutes(time.getMinutes() - 1);
          var futureTime = time.setMinutes(time.getMinutes() + 1);
  
          var minuteView = {
            xaxis: {
              type: 'date',
              range: [olderTime,futureTime]
            }
          };
          Plotly.relayout('graph-incoming', minuteView);
  
          // extend traces
          Plotly.extendTraces('graph-incoming', update, curve_counter);
        });
  
  - } else {
      //- static plot
  - }
    
  
    
    
    
        
        
