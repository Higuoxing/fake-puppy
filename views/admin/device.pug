extends ../layouts/_layout.pug

block variables
  - var activePage = 'basic-table'
  - var activeGroup = 'tables'

block title
  title Devices

block content
  .app-title
    div
      h1
        i.fa.fa-th-list
        |  My Devices

    ul.app-breadcrumb.breadcrumb
      li.breadcrumb-item
        i.fa.fa-home.fa-lg
      li.breadcrumb-item
        | Tables
      li.breadcrumb-item.active
        a(href="#") Devices
        
  .row
    .col-md-6
      .tile
        h4 &nbsp&nbsp System Load
        div(id = 'graph-sys-load', style = 'width: inherit')
          
    .col-md-6
      .tile
        h4 &nbsp&nbsp Free Memory
        div(id = 'graph-mem-free', style = 'width: inherit')

  .row
    .col-md-12
      .tile
        h3.tile-title My Devices
        .table-responsive
          table.table
            thead
              tr
                th # 
                th State
                th Gateway ID
                th System Uptime
                th System Mem-free
                th System Load
                th Wifi-dog Uptime
                th -
                
                - if (devices.length > 0) {
                    tbody
                -     devices.forEach((device, index) => {
                        tr
                          td #{index}
                          td 
                            span.badge.badge-success Online
                          td #{device.gw_id}
                          td #{device.sys_uptime}
                          td #{device.sys_memfree[device.sys_memfree.length-1]}
                          td #{device.sys_load[device.sys_load.length-1]}
                          td #{device.wifidog_uptime}
                          td
                            a(href = `/admin/user/device?gw_id=${device.gw_id}`) view users
                -     });
                - } else {
                    p Oops, no device yet!
                - }

block specific-js
  - let socket_addr = socket_conf.addr;
  script(src = 'https://cdn.plot.ly/plotly-latest.min.js')
  script.
    const socket = io.connect('#{socket_addr}');
    socket.on('loading', function (data) {
      // hand shake
      socket.emit('device-connection', { data: 'pong' });
    });
    
  - if (live_display === true) {
      //- dynamic plot
      script.
        // plot.ly
        var time = new Date();
        let len = parseInt(#{devices.length});
        let data_sys_load = [];
        
      
        for (let i = 0; i < len; i ++) {
          // init data
          data_sys_load.push({ x: [time], y: [ 0 ], mode: 'lines', name: `# ${i}` });
        }
        
        Plotly.plot('graph-sys-load', data_sys_load);

        socket.on('device-data', (data) => {
          // update user-data-outgoing
          var time = new Date();
          let y_update = [];
          let time_update = [];
          let curve_counter = [];
          data.devices.forEach((device, index) => {
            curve_counter.push(index);
            time_update.push([time]);
            y_update.push([device.sys_load[device.sys_load.length-1]]);
          });
        
          var update = {
            x:  time_update,
            y:  y_update
          }
        
          var olderTime = time.setMinutes(time.getMinutes() - 1);
          var futureTime = time.setMinutes(time.getMinutes() + 1);
        
          var minuteView = {
            xaxis: {
              type: 'date',
              range: [olderTime,futureTime]
            }
          };
          Plotly.relayout('graph-sys-load', minuteView);
        
          // extend traces
          Plotly.extendTraces('graph-sys-load', update, curve_counter);
        });

  - } else {
      //- static plot
  - }
  
  - if (live_display === true) {
      //- dynamic plot
      script.
        // plot.ly
        let data_mem_free = [];
  
  
        for (let i = 0; i < len; i ++) {
          // init data
          data_mem_free.push({ x: [time], y: [ 0 ], mode: 'lines', name: `# ${i}` });
        }
  
        Plotly.plot('graph-mem-free', data_mem_free);
  
        socket.on('device-data', (data) => {
          // update user-data-outgoing
          var time = new Date();
          let y_update = [];
          let time_update = [];
          let curve_counter = [];
          data.devices.forEach((device, index) => {
            curve_counter.push(index);
            time_update.push([time]);
            y_update.push([ device.sys_memfree[device.sys_memfree.length-1] ]);
          });
  
          var update = {
            x:  time_update,
            y:  y_update
          }
  
          var olderTime = time.setMinutes(time.getMinutes() - 1);
          var futureTime = time.setMinutes(time.getMinutes() + 1);
  
          var minuteView = {
            xaxis: {
              type: 'date',
              range: [olderTime,futureTime]
            }
          };
          Plotly.relayout('graph-mem-free', minuteView);

          // extend traces
          Plotly.extendTraces('graph-mem-free', update, curve_counter);
        });

  - } else {
      //- static plot
  - }
